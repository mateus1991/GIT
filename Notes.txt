#Criando chave SSH:
ssh-keygen -p
ssh-agent
eval $(ssh-agent -s)
ssh-add C:/Users/mateu/github

#Teste da chave:
ssh -T git@github.com

#Adicionar informações para evitar login e senha toda hora:
git config user.name "mateus1991"
git config user.email "mateus.oliveira@gec.inatel.br"

#Adicionar no github:
git remote add origin https://github.com/mateus1991/GIT.git

#Criar um git numa pasta:
git init
#Puxar dados de um git existente:
git pull
#Clonar outro repositorio:
git clone [url]

#Ver status das alterações:
git status

#Mandar pro repositório:
git add “file”
git commit -m “message”
git push -u origin master
#Editar commit anterior:
git commit --amend

#Guardar alterações sem precisar de commit:
#Mostra lista:
git stash list
#Puxa do stash para o Stage:
git stash pop

#Diferença para antes do ultimo commit:
git diff HEAD~1

#Vizualiza historico de alteraçoes:
git log

#Branch:
git branch
git branch <nova_branch>
#Remover uma branch:
git branch -d <branch>
#MUdar de branch:
git checkout <branch>
#Merge branchs:
git marge <branch>
#Rebase (Merge mas os commits da branch são aplicados antes e depois os da master são aplicados um a um):
git rebase <branch>

#Aplicar commit em outras branchs:
git cherry-pick <commit>

#mostrar quem e em qual commit foi feita alteração linha por linha:
git blame <arquivo>

#Busca binária em commits que mudaram o comportamento:
git bisect start
#Apontar commit com problema:
git bisect bad <commit>
#apontar commit bom:
git bisect good <commit>
#Quando achar o commit que resolve:
git bisect reset

#Fetch (pull = fetch + Merge) permite rebase ao invés de merge:
git fetch

#Guardar um estado do repositório (versões estáveis do projeto):
git tag [nome da tag]
git push <remote> <tag>
git checkout <tag>

#Voltar ao estado em certo commit:
git checkout <commit> <file>
#Retornar:
git checkout master

#Desfazendo alterações sem commit:
git checkout -- <path_or_file>
#Desfaz alteracao em arquivo no stage (já adicionado):
git checkout HEAD -- <path_or_file>
#Desfazer commit anterior:
git revert <commit>
#Voltar o repositório pra outro commit (não fazer se já estiver publicado):
git reset <commit>
git reset --hard <commit>


#treino:
https://github.com/git-game/git-game